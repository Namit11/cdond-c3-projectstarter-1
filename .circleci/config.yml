version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      deployment-id:
        type: string
    steps:
      - run:
          name: Install AWS Cli if required
          when: on_fail
          command: |
            # https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
            if ! command -v aws &> /dev/null
            then
              echo "couldnt not find aws command, installing..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
            else
              echo "aws command found, skipping install"
            fi
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-<< parameters.deployment-id >>" --recursive
            aws s3 rb "s3://udapeople-<< parameters.deployment-id >>" --force
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.deployment-id >>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.deployment-id >>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          # https://circleci.com/docs/2.0/caching/
          keys:
            - v1-npm-frontend-deps-{{ .Branch }}-{{ checksum "frontend/package-lock.json" }}
            - v1-npm-frontend-deps-{{ .Branch }}-
            - v1-npm-frontend-deps-
      - run:
          name: Build Front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths:
            - ~/usr/local/lib/node_modules
          key: v1-npm-frontend-deps-{{ .Branch }}-{{ checksum "frontend/package-lock.json" }}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          # https://circleci.com/docs/2.0/caching/
          keys:
            - v1-npm-backend-deps-{{ .Branch }}-{{ checksum "backend/package-lock.json" }}
            - v1-npm-backend-deps-{{ .Branch }}-
            - v1-npm-backend-deps-
      - run:
          name: Build Back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths:
            - ~/usr/local/lib/node_modules
          key: v1-npm-backend-deps-{{ .Branch }}-{{ checksum "backend/package-lock.json" }}

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          # https://circleci.com/docs/2.0/caching/
          keys:
            - v1-npm-frontend-deps-{{ .Branch }}-{{ checksum "frontend/package-lock.json" }}
            - v1-npm-frontend-deps-{{ .Branch }}-
            - v1-npm-frontend-deps-
      - run:
          name: Test Front-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths:
            - ~/usr/local/lib/node_modules
          key: v1-npm-frontend-deps-{{ .Branch }}-{{ checksum "frontend/package-lock.json" }}

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          # https://circleci.com/docs/2.0/caching/
          keys:
            - v1-npm-backend-deps-{{ .Branch }}-{{ checksum "backend/package-lock.json" }}
            - v1-npm-backend-deps-{{ .Branch }}-
            - v1-npm-backend-deps-
      - run:
          name: Test Back-end
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths:
            - ~/usr/local/lib/node_modules
          key: v1-npm-backend-deps-{{ .Branch }}-{{ checksum "backend/package-lock.json" }}

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          # https://circleci.com/docs/2.0/caching/
          keys:
            - v1-npm-frontend-deps-{{ .Branch }}-{{ checksum "frontend/package-lock.json" }}
            - v1-npm-frontend-deps-{{ .Branch }}-
            - v1-npm-frontend-deps-
      - run:
          name: Scan Front-end
          command: |
            cd frontend
            npm install
            # Added to following audit fix get pipeline to parse <- do not do this
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths:
            - ~/usr/local/lib/node_modules
          key: v1-npm-frontend-deps-{{ .Branch }}-{{ checksum "frontend/package-lock.json" }}

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          # https://circleci.com/docs/2.0/caching/
          keys:
            - v1-npm-backend-deps-{{ .Branch }}-{{ checksum "backend/package-lock.json" }}
            - v1-npm-backend-deps-{{ .Branch }}-
            - v1-npm-backend-deps-
      - run:
          name: Scan Back-end
          command: |
            cd backend
            npm install
            # Added to following audit fix get pipeline to parse <- do not do this
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths:
            - ~/usr/local/lib/node_modules
          key: v1-npm-backend-deps-{{ .Branch }}-{{ checksum "backend/package-lock.json" }}

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:2.4.6
    steps:
      - checkout
      # tar is not included in aws-cli:2.4.6 image and is needed for persist_to_workspace
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#Using_Tags_CLI
            aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          deployment-id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: circleci/python:3.10.0
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - attach_workspace:
          # https://circleci.com/docs/2.0/configuration-reference/
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo pip install ansible
      - add_ssh_keys:
          #https://circleci.com/docs/2.0/add-ssh-key
          fingerprints:
            - "0a:ee:44:f0:31:5b:df:2e:31:00:b7:99:00:24:8a:60"
      - run:
          name: Configure server
          # adding no_output_timeout as ansible has a pause for 10mins
          no_output_timeout: 15m
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          deployment-id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          # https://circleci.com/docs/2.0/configuration-reference/
          at: ~/
      - restore_cache:
          # https://circleci.com/docs/2.0/caching/
          keys:
            - v1-npm-backend-deps-{{ .Branch }}-{{ checksum "backend/package-lock.json" }}
            - v1-npm-backend-deps-{{ .Branch }}-
            - v1-npm-backend-deps-
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and sve the migration output
            mkdir -p /tmp/workspace
            npm run migrations > ~/project/backend/migrations_dump.txt
            pwd
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            # IMPORTANT: This section has been added but a the time of this assessment memstash.io is DOWN!
            #            Using persist_to_workspace to share state
            #
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment:
          deployment-id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          # https://circleci.com/docs/2.0/configuration-reference/
          at: ~/
      - run:
          name: Install dependencies
          command: |
            if ! command -v aws &> /dev/null
            then
              echo "couldnt not find aws command, installing..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
            else
              echo "aws command found, skipping install"
            fi
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment:
          deployment-id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - attach_workspace:
          # https://circleci.com/docs/2.0/configuration-reference/
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt install python3-pip
            sudo pip3 install ansible
      - add_ssh_keys:
          #https://circleci.com/docs/2.0/add-ssh-key
          fingerprints:
            - "0a:ee:44:f0:31:5b:df:2e:31:00:b7:99:00:24:8a:60"
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment:
          deployment-id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: amazon/aws-cli:2.4.6
    steps:
      # Checkout code from git - NOT REQUIRED
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - attach_workspace:
          # https://circleci.com/docs/2.0/configuration-reference/
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text)
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment:
          deployment-id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli:2.4.6
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - attach_workspace:
          # https://circleci.com/docs/2.0/configuration-reference/
          at: ~/
      - run:
          name: Write old workflow ID
          command: |
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo ${OldWorkflowID} > ~/project/old_workflow_id.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/old_workflow_id.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=udapeople
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment:
          deployment-id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: amazon/aws-cli:2.4.6
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - attach_workspace:
          # https://circleci.com/docs/2.0/configuration-reference/
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(cat ~/project/old_workflow_id.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat ~/project/old_workflow_id.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
